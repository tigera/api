// Copyright (c) 2024 Tigera, Inc. All rights reserved.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v3 "github.com/tigera/api/pkg/apis/projectcalico/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeBFDConfigurations implements BFDConfigurationInterface
type FakeBFDConfigurations struct {
	Fake *FakeProjectcalicoV3
}

var bfdconfigurationsResource = v3.SchemeGroupVersion.WithResource("bfdconfigurations")

var bfdconfigurationsKind = v3.SchemeGroupVersion.WithKind("BFDConfiguration")

// Get takes name of the bFDConfiguration, and returns the corresponding bFDConfiguration object, and an error if there is any.
func (c *FakeBFDConfigurations) Get(ctx context.Context, name string, options v1.GetOptions) (result *v3.BFDConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(bfdconfigurationsResource, name), &v3.BFDConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v3.BFDConfiguration), err
}

// List takes label and field selectors, and returns the list of BFDConfigurations that match those selectors.
func (c *FakeBFDConfigurations) List(ctx context.Context, opts v1.ListOptions) (result *v3.BFDConfigurationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(bfdconfigurationsResource, bfdconfigurationsKind, opts), &v3.BFDConfigurationList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v3.BFDConfigurationList{ListMeta: obj.(*v3.BFDConfigurationList).ListMeta}
	for _, item := range obj.(*v3.BFDConfigurationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested bFDConfigurations.
func (c *FakeBFDConfigurations) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(bfdconfigurationsResource, opts))
}

// Create takes the representation of a bFDConfiguration and creates it.  Returns the server's representation of the bFDConfiguration, and an error, if there is any.
func (c *FakeBFDConfigurations) Create(ctx context.Context, bFDConfiguration *v3.BFDConfiguration, opts v1.CreateOptions) (result *v3.BFDConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(bfdconfigurationsResource, bFDConfiguration), &v3.BFDConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v3.BFDConfiguration), err
}

// Update takes the representation of a bFDConfiguration and updates it. Returns the server's representation of the bFDConfiguration, and an error, if there is any.
func (c *FakeBFDConfigurations) Update(ctx context.Context, bFDConfiguration *v3.BFDConfiguration, opts v1.UpdateOptions) (result *v3.BFDConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(bfdconfigurationsResource, bFDConfiguration), &v3.BFDConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v3.BFDConfiguration), err
}

// Delete takes name of the bFDConfiguration and deletes it. Returns an error if one occurs.
func (c *FakeBFDConfigurations) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(bfdconfigurationsResource, name, opts), &v3.BFDConfiguration{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBFDConfigurations) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(bfdconfigurationsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v3.BFDConfigurationList{})
	return err
}

// Patch applies the patch and returns the patched bFDConfiguration.
func (c *FakeBFDConfigurations) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v3.BFDConfiguration, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(bfdconfigurationsResource, name, pt, data, subresources...), &v3.BFDConfiguration{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v3.BFDConfiguration), err
}
