// Copyright (c) 2021 Tigera, Inc. All rights reserved.

// Code generated by client-gen. DO NOT EDIT.

package v3

import (
	"time"

	v3 "github.com/tigera/api/pkg/apis/projectcalico/v3"
	scheme "github.com/tigera/api/pkg/client/clientset_generated/clientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// KubeControllersConfigurationsGetter has a method to return a KubeControllersConfigurationInterface.
// A group's client should implement this interface.
type KubeControllersConfigurationsGetter interface {
	KubeControllersConfigurations() KubeControllersConfigurationInterface
}

// KubeControllersConfigurationInterface has methods to work with KubeControllersConfiguration resources.
type KubeControllersConfigurationInterface interface {
	Create(*v3.KubeControllersConfiguration) (*v3.KubeControllersConfiguration, error)
	Update(*v3.KubeControllersConfiguration) (*v3.KubeControllersConfiguration, error)
	UpdateStatus(*v3.KubeControllersConfiguration) (*v3.KubeControllersConfiguration, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v3.KubeControllersConfiguration, error)
	List(opts v1.ListOptions) (*v3.KubeControllersConfigurationList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.KubeControllersConfiguration, err error)
	KubeControllersConfigurationExpansion
}

// kubeControllersConfigurations implements KubeControllersConfigurationInterface
type kubeControllersConfigurations struct {
	client rest.Interface
}

// newKubeControllersConfigurations returns a KubeControllersConfigurations
func newKubeControllersConfigurations(c *ProjectcalicoV3Client) *kubeControllersConfigurations {
	return &kubeControllersConfigurations{
		client: c.RESTClient(),
	}
}

// Get takes name of the kubeControllersConfiguration, and returns the corresponding kubeControllersConfiguration object, and an error if there is any.
func (c *kubeControllersConfigurations) Get(name string, options v1.GetOptions) (result *v3.KubeControllersConfiguration, err error) {
	result = &v3.KubeControllersConfiguration{}
	err = c.client.Get().
		Resource("kubecontrollersconfigurations").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of KubeControllersConfigurations that match those selectors.
func (c *kubeControllersConfigurations) List(opts v1.ListOptions) (result *v3.KubeControllersConfigurationList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v3.KubeControllersConfigurationList{}
	err = c.client.Get().
		Resource("kubecontrollersconfigurations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested kubeControllersConfigurations.
func (c *kubeControllersConfigurations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("kubecontrollersconfigurations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a kubeControllersConfiguration and creates it.  Returns the server's representation of the kubeControllersConfiguration, and an error, if there is any.
func (c *kubeControllersConfigurations) Create(kubeControllersConfiguration *v3.KubeControllersConfiguration) (result *v3.KubeControllersConfiguration, err error) {
	result = &v3.KubeControllersConfiguration{}
	err = c.client.Post().
		Resource("kubecontrollersconfigurations").
		Body(kubeControllersConfiguration).
		Do().
		Into(result)
	return
}

// Update takes the representation of a kubeControllersConfiguration and updates it. Returns the server's representation of the kubeControllersConfiguration, and an error, if there is any.
func (c *kubeControllersConfigurations) Update(kubeControllersConfiguration *v3.KubeControllersConfiguration) (result *v3.KubeControllersConfiguration, err error) {
	result = &v3.KubeControllersConfiguration{}
	err = c.client.Put().
		Resource("kubecontrollersconfigurations").
		Name(kubeControllersConfiguration.Name).
		Body(kubeControllersConfiguration).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *kubeControllersConfigurations) UpdateStatus(kubeControllersConfiguration *v3.KubeControllersConfiguration) (result *v3.KubeControllersConfiguration, err error) {
	result = &v3.KubeControllersConfiguration{}
	err = c.client.Put().
		Resource("kubecontrollersconfigurations").
		Name(kubeControllersConfiguration.Name).
		SubResource("status").
		Body(kubeControllersConfiguration).
		Do().
		Into(result)
	return
}

// Delete takes name of the kubeControllersConfiguration and deletes it. Returns an error if one occurs.
func (c *kubeControllersConfigurations) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("kubecontrollersconfigurations").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *kubeControllersConfigurations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("kubecontrollersconfigurations").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched kubeControllersConfiguration.
func (c *kubeControllersConfigurations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.KubeControllersConfiguration, err error) {
	result = &v3.KubeControllersConfiguration{}
	err = c.client.Patch(pt).
		Resource("kubecontrollersconfigurations").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
