// Copyright (c) 2025 Tigera, Inc. All rights reserved.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v3 "github.com/tigera/api/pkg/apis/projectcalico/v3"
	projectcalicov3 "github.com/tigera/api/pkg/client/clientset_generated/clientset/typed/projectcalico/v3"
	gentype "k8s.io/client-go/gentype"
)

// fakeLicenseKeys implements LicenseKeyInterface
type fakeLicenseKeys struct {
	*gentype.FakeClientWithList[*v3.LicenseKey, *v3.LicenseKeyList]
	Fake *FakeProjectcalicoV3
}

func newFakeLicenseKeys(fake *FakeProjectcalicoV3) projectcalicov3.LicenseKeyInterface {
	return &fakeLicenseKeys{
		gentype.NewFakeClientWithList[*v3.LicenseKey, *v3.LicenseKeyList](
			fake.Fake,
			"",
			v3.SchemeGroupVersion.WithResource("licensekeys"),
			v3.SchemeGroupVersion.WithKind("LicenseKey"),
			func() *v3.LicenseKey { return &v3.LicenseKey{} },
			func() *v3.LicenseKeyList { return &v3.LicenseKeyList{} },
			func(dst, src *v3.LicenseKeyList) { dst.ListMeta = src.ListMeta },
			func(list *v3.LicenseKeyList) []*v3.LicenseKey { return gentype.ToPointerSlice(list.Items) },
			func(list *v3.LicenseKeyList, items []*v3.LicenseKey) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
